{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Backpropagation exercise\n",
    "In the previous homework, you implemented a softmax classifier on mnist. The implementation was simple but not very modular since the loss and gradient were computed in a single monolithic function. This is manageable for a simple one-layer network, but would become impractical as we move to bigger models. Ideally we want to build networks using a more modular design so that we can implement different layer typess in isolation and then snap them together into models with different architectures.\n",
    "\n",
    "In this exercise we will implemtn fully-connected networks using a more modular approach. For each layer we will implement a <code>forward</code> and a <code>backward</code> function. The <code>forward</code> function will receive inputs, weights, and other parameters and will return both an output and a <code>cache</code> object storing data needed for the backward pass like this:\n",
    "\n",
    "```python\n",
    "def layer_forward(x, w):\n",
    "    \"\"\" Receive inputs x and weights w \"\"\"\n",
    "    # Do some computations ...\n",
    "    z = # ... sime intermediate value\n",
    "    # Do some more computations ...\n",
    "    out = # the output\n",
    "    \n",
    "    cache = (x, w, z, out) # Values we need to compute gradients\n",
    "    return (out, cache)\n",
    "```\n",
    "\n",
    "The backward pass will receive upstream derivatives and the <code>cache</code> object, and will return gradients with respect to the input and weights like this:\n",
    "\n",
    "```python\n",
    "def layer_backward(dout, cache):\n",
    "    \"\"\"\n",
    "    Receive derivative of loss with respect to outputs and cache, and compute derivative with respect to inputs.\n",
    "    \"\"\"\n",
    "    # Unpack cache values\n",
    "    x, w, z, out = cache\n",
    "    \n",
    "    # Use values in cache to compute derivatives\n",
    "    dx = # Derivative of loss with respect to x\n",
    "    dw = # Derivative of loss with respect to w\n",
    "    \n",
    "    return dx, dw\n",
    "```\n",
    "\n",
    "After implementing a bunch of layers this way,we will be able to easily combine them to build classifiers with different architectures.\n",
    "\n",
    "In addition to implement fully-connected networks of arbitrary depth, we will also explore different update rules for optimization."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "from keras.datasets import fashion_mnist\n",
    "from sklearn.model_selection import StratifiedShuffleSplit\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "def rel_error(x, y):\n",
    "  \"\"\" returns relative error \"\"\"\n",
    "  return np.max(np.abs(x - y) / (np.maximum(1e-8, np.abs(x) + np.abs(y))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train.shape  (60000, 28, 28)\n",
      "y_train.shape  (60000,)\n",
      "X_test.shape   (10000, 28, 28)\n",
      "y_test.shape   (10000,)\n",
      "6000 data of T-shirt/top\n",
      "6000 data of Trouser\n",
      "6000 data of Pullover\n",
      "6000 data of Dress\n",
      "6000 data of Coat\n",
      "6000 data of Sandal\n",
      "6000 data of Shirt\n",
      "6000 data of Sneaker\n",
      "6000 data of Bag\n",
      "6000 data of Ankle boot\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 9 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "nb_classes = 10\n",
    "class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']\n",
    "(X_train, y_train), (X_test, y_test) = fashion_mnist.load_data()\n",
    "\n",
    "#############################################################################\n",
    "# TODO: Print the shape of the training data and testing data               #\n",
    "# Plot the previous 9 training data and title their class name              #\n",
    "# Count the number of data for each class in training data                  #\n",
    "#############################################################################\n",
    "# raise NotImplementedError()\n",
    "\n",
    "print(\"X_train.shape  {}\".format(X_train.shape))\n",
    "print(\"y_train.shape  {}\".format(y_train.shape))\n",
    "print(\"X_test.shape   {}\".format(X_test.shape))\n",
    "print(\"y_test.shape   {}\".format(y_test.shape))\n",
    "\n",
    "ar1,ar2 = np.unique(y_train, return_counts=True)\n",
    "for i in range(len(ar1)):\n",
    "    print((\"{} data of \" + class_names[i]).format(ar2[i]))\n",
    "\n",
    "\n",
    "from matplotlib import pyplot as plt\n",
    "\n",
    "fig, axar =plt.subplots(3,3)\n",
    "plt.tight_layout()\n",
    "for i in range(0,9):\n",
    "    axar[int(i/3),i%3].set_title(str(class_names[y_train[i]]))\n",
    "    axar[int(i/3),i%3].imshow(X_train[i])\n",
    "\n",
    "#############################################################################\n",
    "#                          END OF YOUR CODE                                 #\n",
    "#############################################################################"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train data shape: (6000, 28, 28)\n",
      "Train label shape: (6000,)\n",
      "Validation data shape: (6000, 28, 28)\n",
      "Validation label shape: (6000,)\n",
      "Test data shape: (2000, 28, 28)\n",
      "Test label shape: (2000,)\n"
     ]
    }
   ],
   "source": [
    "# data prepration for binary classification\n",
    "not_n = 6\n",
    "def get_binary_data(X_train, y_train, X_test, y_test):\n",
    "    \n",
    "    # normalization\n",
    "    X_train = X_train / 255.\n",
    "    X_test = X_test / 255.\n",
    "    \n",
    "    # reshape\n",
    "    y_train = np.array(y_train)\n",
    "    y_test = np.array(y_test)\n",
    "    \n",
    "    # binarize\n",
    "    y_train[y_train != not_n] = 0.\n",
    "    y_train[y_train == not_n] = 1.\n",
    "    y_test[y_test != not_n] = 0.\n",
    "    y_test[y_test == not_n] = 1.\n",
    "\n",
    "    X = np.array(X_train)\n",
    "    y = np.array(y_train)\n",
    "    \n",
    "    # split train and validation\n",
    "    sss = StratifiedShuffleSplit(n_splits = 10, test_size = 0.5, random_state = 0)\n",
    "    for train_idx, val_idx in sss.split(X_train, y_train):\n",
    "        X_train, X_val = X[train_idx], X[val_idx]\n",
    "        y_train, y_val = y[train_idx], y[val_idx]\n",
    "    \n",
    "    X_train, y_train = subsampling(X_train, y_train)\n",
    "    X_val, y_val = subsampling(X_val, y_val)\n",
    "    X_test, y_test = subsampling(X_test, y_test)\n",
    "    \n",
    "    return X_train, y_train, X_val, y_val, X_test, y_test\n",
    "\n",
    "def subsampling(X, y):\n",
    "    unique, count = np.unique(y, return_counts = True)\n",
    "    n_sampling = count[np.argmin(count)]\n",
    "    \n",
    "    idx_list = []\n",
    "    for i in range(len(unique)):\n",
    "        if count[i] <= n_sampling:\n",
    "            idx_list.append(np.where(y == unique[i])[0])\n",
    "            continue\n",
    "        idx = np.where(y == unique[i])[0]\n",
    "        idx = np.random.choice(idx, n_sampling, replace = False)\n",
    "        idx_list.append(idx)\n",
    "    \n",
    "    all_idx = np.sort(np.concatenate(idx_list))\n",
    "    X_sub = X[all_idx]\n",
    "    y_sub = y[all_idx]\n",
    "    \n",
    "    return X_sub, y_sub\n",
    "\n",
    "# Invoke the above function to get our data\n",
    "X_train, y_train, X_val, y_val, X_test, y_test = get_binary_data(X_train, y_train, X_test, y_test)\n",
    "print('Train data shape: {}'.format(X_train.shape))\n",
    "print('Train label shape: {}'.format(y_train.shape))\n",
    "print('Validation data shape: {}'.format(X_val.shape))\n",
    "print('Validation label shape: {}'.format(y_val.shape))\n",
    "print('Test data shape: {}'.format(X_test.shape))\n",
    "print('Test label shape: {}'.format(y_test.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Affine layer: forward\n",
    "Implement the <code>affine_forward</code> function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing affine_forward function:\n",
      "difference: 9.769848308602077e-10\n"
     ]
    }
   ],
   "source": [
    "def affine_forward(x, w, b, a):\n",
    "    \"\"\"\n",
    "    Computes the forward pass for an affine (fully-connected) layer.\n",
    "\n",
    "    The input x has shape (N, d_1, ..., d_k) and contains a minibatch of N\n",
    "    examples, where each example x[i] has shape (d_1, ..., d_k). We will\n",
    "    reshape each input into a vector of dimension D = d_1 * ... * d_k, and\n",
    "    then transform it to an output vector of dimension M.\n",
    "\n",
    "    Inputs:\n",
    "    - x: A numpy array containing input data, of shape (N, d_1, ..., d_k)\n",
    "    - w: A numpy array of weights, of shape (D, M)\n",
    "    - b: A numpy array of biases, of shape (M,)\n",
    "    - a: A function of activation\n",
    "\n",
    "    Returns a tuple of:\n",
    "    - out: output, of shape (N, M)\n",
    "    - cache: (x, w, b)\n",
    "    \"\"\"\n",
    "    out = None\n",
    "    ###########################################################################\n",
    "    # TODO: Implement the affine forward pass. Store the result in out. You   #\n",
    "    # will need to reshape the input into rows.                               #\n",
    "    ###########################################################################\n",
    "#     raise NotImplementedError()\n",
    "    N = x.shape[0]\n",
    "    D = w.shape[0]\n",
    "    M = w.shape[1]\n",
    "    x_reshape = x.reshape((N,D))\n",
    "    z = np.empty((N,M))\n",
    "    out = np.empty((N,M))\n",
    "    \n",
    "    for i in range(N):\n",
    "        z[i] = np.dot(x_reshape[i], w) + b\n",
    "        out[i] = a(z[i])\n",
    "    ###########################################################################\n",
    "    #                             END OF YOUR CODE                            #\n",
    "    ###########################################################################\n",
    "    cache = ((x, w, b), (z))\n",
    "    return out, cache\n",
    "\n",
    "# Test the affine_forward function\n",
    "num_inputs = 2\n",
    "input_shape = (4, 5, 6)\n",
    "output_dim = 3\n",
    "\n",
    "input_size = num_inputs * np.prod(input_shape)\n",
    "weight_size = output_dim * np.prod(input_shape)\n",
    "\n",
    "x = np.linspace(-0.1, 0.5, num = input_size).reshape(num_inputs, *input_shape)\n",
    "w = np.linspace(-0.2, 0.3, num = weight_size).reshape(np.prod(input_shape), output_dim)\n",
    "b = np.linspace(-0.3, 0.1, num = output_dim)\n",
    "\n",
    "a = lambda x: x # linear activation\n",
    "out, _ = affine_forward(x, w, b, a)\n",
    "correct_out = np.array([[ 1.49834967,  1.70660132,  1.91485297],\n",
    "                        [ 3.25553199,  3.5141327,   3.77273342]])\n",
    "\n",
    "# Compare your output with ours. The error should be around 1e-9.\n",
    "print('Testing affine_forward function:')\n",
    "print('difference: {}'.format(rel_error(out, correct_out)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Affine layer: backward\n",
    "Now implement the <code>affine_backward</code> function and test your implementation using numeric gradient checking."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing affine_backward function:\n",
      "dx error: 2.775066066812339e-11\n",
      "dw error: 8.147071119166524e-11\n",
      "db error: 7.736978834487815e-12\n"
     ]
    }
   ],
   "source": [
    "def affine_backward(dout, da, cache):\n",
    "    \"\"\"\n",
    "    Computes the backward pass for an affine layer.\n",
    "\n",
    "    Inputs:\n",
    "    - dout: Upstream derivative, of shape (N, M)\n",
    "    - da: A function of the derivative of the activation\n",
    "    - cache: Tuple of:\n",
    "      - x: Input data, of shape (N, d_1, ... d_k)\n",
    "      - w: Weights, of shape (D, M)\n",
    "\n",
    "    Returns a tuple of:\n",
    "    - dx: Gradient with respect to x, of shape (N, d1, ..., d_k)\n",
    "    - dw: Gradient with respect to w, of shape (D, M)\n",
    "    - db: Gradient with respect to b, of shape (M,)\n",
    "    \"\"\"\n",
    "    fc_cache, act_cache = cache\n",
    "    x, w, b = fc_cache\n",
    "    z = act_cache\n",
    "    dx, dw, db = None, None, None\n",
    "    ###########################################################################\n",
    "    # TODO: Implement the affine backward pass.                               #\n",
    "    ###########################################################################\n",
    "#     raise NotImplementedError()\n",
    "    \n",
    "    N = x.shape[0]\n",
    "    D = w.shape[0]\n",
    "    M = w.shape[1]\n",
    "    x_reshape = x.reshape((N, D))\n",
    "    dw_N = np.empty((N,D,M))\n",
    "    for i in range(N):\n",
    "        tmp = dout[i] * da(z[i,:])\n",
    "        dw_N[i] = np.matmul(x_reshape[i].reshape((D, 1)), tmp.reshape((1, M)))\n",
    "        \n",
    "#     dw = np.dot(x_reshape.T, (dout * da(z)))        \n",
    "    dw = np.sum(dw_N, axis = 0)\n",
    "    db = dout.sum(axis = 0)\n",
    "    dx = np.dot((dout * da(z)), w.T)\n",
    "    dx = dx.reshape(x.shape)\n",
    "    ###########################################################################\n",
    "    #                             END OF YOUR CODE                            #\n",
    "    ###########################################################################\n",
    "    return dx, dw, db\n",
    "\n",
    "def eval_numerical_gradient_array(f, x, df, h=1e-5):\n",
    "    \"\"\"\n",
    "    Evaluate a numeric gradient for a function that accepts a numpy\n",
    "    array and returns a numpy array.\n",
    "    \"\"\"\n",
    "    grad = np.zeros_like(x)\n",
    "    it = np.nditer(x, flags = ['multi_index'], op_flags = ['readwrite'])\n",
    "    while not it.finished:\n",
    "        ix = it.multi_index\n",
    "\n",
    "        oldval = x[ix]\n",
    "        x[ix] = oldval + h\n",
    "        pos = f(x).copy()\n",
    "        x[ix] = oldval - h\n",
    "        neg = f(x).copy()\n",
    "        x[ix] = oldval\n",
    "\n",
    "        grad[ix] = np.sum((pos - neg) * df) / (2 * h)\n",
    "        it.iternext()\n",
    "    return grad\n",
    "\n",
    "# Test the affine_backward function\n",
    "np.random.seed(231)\n",
    "x = np.random.randn(10, 2, 3)\n",
    "w = np.random.randn(6, 5)\n",
    "b = np.random.randn(5)\n",
    "dout = np.random.randn(10, 5)\n",
    "\n",
    "dx_num = eval_numerical_gradient_array(lambda x: affine_forward(x, w, b, a)[0], x, dout)\n",
    "dw_num = eval_numerical_gradient_array(lambda w: affine_forward(x, w, b, a)[0], w, dout)\n",
    "db_num = eval_numerical_gradient_array(lambda b: affine_forward(x, w, b, a)[0], b, dout)\n",
    "\n",
    "_, cache = affine_forward(x, w, b, a)\n",
    "da = lambda x: 1 # the derivative of linear activation\n",
    "dx, dw, db = affine_backward(dout, da, cache)\n",
    "\n",
    "# The error should be around 1e-10\n",
    "print('Testing affine_backward function:')\n",
    "print('dx error: {}'.format(rel_error(dx_num, dx)))\n",
    "print('dw error: {}'.format(rel_error(dw_num, dw)))\n",
    "print('db error: {}'.format(rel_error(db_num, db)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Two-layer network\n",
    "Now that you have implemented modular versions of the necessary layers, you will reimplement the two layer network using these modular implementations.\n",
    "\n",
    "Complete the implementation of the <code>TwoLayerNet</code> class. This class will serve as a model for the other networks you will implement in this assignment, so read through it to make sure you understand the API. You can run the cell below to test your implementation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing initialization ... \n",
      "Testing test-time forward pass ... \n",
      "Testing training loss (no regularization)\n",
      "Running numeric gradient check with reg =  0.0\n",
      "W1 relative error: 1.83e-08\n",
      "W2 relative error: 3.25e-10\n",
      "b1 relative error: 6.55e-09\n",
      "b2 relative error: 4.33e-10\n",
      "Running numeric gradient check with reg =  0.7\n",
      "W1 relative error: 1.00e+00\n",
      "W2 relative error: 1.00e+00\n",
      "b1 relative error: 1.56e-08\n",
      "b2 relative error: 9.09e-10\n"
     ]
    }
   ],
   "source": [
    "# http://ml-cheatsheet.readthedocs.io/en/latest/activation_functions.html\n",
    "acts = {'relu': lambda x: np.maximum(x, 0., x),\n",
    "       'tanh': lambda x: np.tanh(x),\n",
    "       'sigmoid': lambda x: 1 / (1 + np.exp(- x)),\n",
    "       'leaky_relu': lambda x: np.maximum(x, 0.01 * x, x)} # here alpha = 0.01\n",
    "dacts = {'relu': lambda x: np.greater(x, 0),\n",
    "        'tanh': lambda x: (1 - (x ** 2)),\n",
    "        'sigmoid': lambda x: x * (1 - x),\n",
    "        'leaky_relu': lambda x: np.greater(x, 0) * (1 - 0.01) + 0.01}\n",
    "\n",
    "def softmax_loss(x, y):\n",
    "    \"\"\"\n",
    "    Computes the loss and gradient for softmax classification.\n",
    "\n",
    "    Inputs:\n",
    "    - x: Input data, of shape (N, C) where x[i, j] is the score for the jth\n",
    "      class for the ith input.\n",
    "    - y: Vector of labels, of shape (N,) where y[i] is the label for x[i] and\n",
    "      0 <= y[i] < C\n",
    "\n",
    "    Returns a tuple of:\n",
    "    - loss: Scalar giving the loss\n",
    "    - dx: Gradient of the loss with respect to x\n",
    "    \"\"\"\n",
    "    shifted_logits = x - np.max(x, axis = 1, keepdims = True)\n",
    "    Z = np.sum(np.exp(shifted_logits), axis=1, keepdims = True)\n",
    "    log_probs = shifted_logits - np.log(Z)\n",
    "    probs = np.exp(log_probs)\n",
    "    N = x.shape[0]\n",
    "    loss = - np.sum(log_probs[np.arange(N), y]) / N\n",
    "    dx = probs.copy()\n",
    "    dx[np.arange(N), y] -= 1\n",
    "    dx /= N\n",
    "    return loss, dx\n",
    "\n",
    "class TwoLayerNet(object):\n",
    "    \"\"\"\n",
    "    A two-layer fully-connected neural network with ReLU nonlinearity and\n",
    "    softmax loss that uses a modular layer design. We assume an input dimension\n",
    "    of D, a hidden dimension of H, and perform classification over C classes.\n",
    "\n",
    "    The architecure should be affine - relu - affine - softmax.\n",
    "\n",
    "    Note that this class does not implement gradient descent; instead, it\n",
    "    will interact with a separate Solver object that is responsible for running\n",
    "    optimization.\n",
    "\n",
    "    The learnable parameters of the model are stored in the dictionary\n",
    "    self.params that maps parameter names to numpy arrays.\n",
    "    \"\"\"\n",
    "\n",
    "    def __init__(self, input_dim = 28 * 28, hidden_dim = 100, num_classes = 10,\n",
    "                 weight_scale = 1e-3, reg = 0.0, act = (acts['relu'], dacts['relu'])):\n",
    "        \"\"\"\n",
    "        Initialize a new network.\n",
    "\n",
    "        Inputs:\n",
    "        - input_dim: An integer giving the size of the input\n",
    "        - hidden_dim: An integer giving the size of the hidden layer\n",
    "        - num_classes: An integer giving the number of classes to classify\n",
    "        - dropout: Scalar between 0 and 1 giving dropout strength.\n",
    "        - weight_scale: Scalar giving the standard deviation for random\n",
    "          initialization of the weights.\n",
    "        - reg: Scalar giving L2 regularization strength.\n",
    "        \"\"\"\n",
    "        self.params = {}\n",
    "        self.reg = reg\n",
    "        self.act = act\n",
    "\n",
    "        ############################################################################\n",
    "        # TODO: Initialize the weights and biases of the two-layer net. Weights    #\n",
    "        # should be initialized from a Gaussian with standard deviation equal to   #\n",
    "        # weight_scale, and biases should be initialized to zero. All weights and  #\n",
    "        # biases should be stored in the dictionary self.params, with first layer  #\n",
    "        # weights and biases using the keys 'W1' and 'b1' and second layer weights #\n",
    "        # and biases using the keys 'W2' and 'b2'.                                 #\n",
    "        ############################################################################\n",
    "#         raise NotImplementedError()\n",
    "        self.params['W1']= np.random.normal(scale=weight_scale, size=(input_dim, hidden_dim))\n",
    "        self.params['b1']= np.zeros((hidden_dim,))\n",
    "        self.params['W2']= np.random.normal(scale=weight_scale, size=(hidden_dim, num_classes))\n",
    "        self.params['b2']= np.zeros((num_classes,))\n",
    "        ############################################################################\n",
    "        #                             END OF YOUR CODE                             #\n",
    "        ############################################################################\n",
    "\n",
    "\n",
    "    def loss(self, X, y = None):\n",
    "        \"\"\"\n",
    "        Compute loss and gradient for a minibatch of data.\n",
    "\n",
    "        Inputs:\n",
    "        - X: Array of input data of shape (N, d_1, ..., d_k)\n",
    "        - y: Array of labels, of shape (N,). y[i] gives the label for X[i].\n",
    "\n",
    "        Returns:\n",
    "        If y is None, then run a test-time forward pass of the model and return:\n",
    "        - scores: Array of shape (N, C) giving classification scores, where\n",
    "          scores[i, c] is the classification score for X[i] and class c.\n",
    "\n",
    "        If y is not None, then run a training-time forward and backward pass and\n",
    "        return a tuple of:\n",
    "        - loss: Scalar value giving the loss\n",
    "        - grads: Dictionary with the same keys as self.params, mapping parameter\n",
    "          names to gradients of the loss with respect to those parameters.\n",
    "        \"\"\"\n",
    "        scores = None\n",
    "        ############################################################################\n",
    "        # TODO: Implement the forward pass for the two-layer net, computing the    #\n",
    "        # class scores for X and storing them in the scores variable.              #\n",
    "        ############################################################################\n",
    "#         raise NotImplementedError()\n",
    "        w1 = self.params['W1']\n",
    "        b1 = self.params['b1']\n",
    "        w2 = self.params['W2']\n",
    "        b2 = self.params['b2']\n",
    "        \n",
    "        w1_shape = w1.shape\n",
    "        w2_shape = w2.shape\n",
    "        D = w1_shape[0]\n",
    "        h = w1_shape[1]\n",
    "        num_c = w2.shape[1]\n",
    "        N = X.shape[0]\n",
    "\n",
    "        X = X.reshape((N,D))\n",
    "        layer1_output, layer1_cache = affine_forward(X, w1, b1, self.act[0])\n",
    "        layer2_output, layer2_cache = affine_forward(layer1_output, w2, b2, lambda x: x)\n",
    "        \n",
    "        scores = layer2_output\n",
    "        ############################################################################\n",
    "        #                             END OF YOUR CODE                             #\n",
    "        ############################################################################\n",
    "\n",
    "        # If y is None then we are in test mode so just return scores\n",
    "        if y is None:\n",
    "            return scores\n",
    "\n",
    "        loss, grads = 0, {}\n",
    "        ############################################################################\n",
    "        # TODO: Implement the backward pass for the two-layer net. Store the loss  #\n",
    "        # in the loss variable and gradients in the grads dictionary. Compute data #\n",
    "        # loss using softmax, and make sure that grads[k] holds the gradients for  #\n",
    "        # self.params[k]. Don't forget to add L2 regularization!                   #\n",
    "        #                                                                          #\n",
    "        # NOTE: To ensure that your implementation matches ours and you pass the   #\n",
    "        # automated tests, make sure that your L2 regularization includes a factor #\n",
    "        # of 0.5 to simplify the expression for the gradient.                      #\n",
    "        ############################################################################\n",
    "#         raise NotImplementedError()\n",
    "        loss, dout = softmax_loss(scores, y)\n",
    "        dout_h, dw2, db2 = affine_backward(dout, lambda x: 1, layer2_cache)\n",
    "        _ , dw1, db1 = affine_backward(dout_h, self.act[1], layer1_cache)\n",
    "        grads['W1'] = dw1\n",
    "        grads['b1'] = db1\n",
    "        grads['W2'] = dw2\n",
    "        grads['b2'] = db2\n",
    "\n",
    "        reg_loss = 0.5 * self.reg * (np.sum(w1 * w1) + np.sum(w2 *w2))\n",
    "        loss += reg_loss\n",
    "        ############################################################################\n",
    "        #                             END OF YOUR CODE                             #\n",
    "        ############################################################################\n",
    "\n",
    "        return loss, grads\n",
    "\n",
    "def eval_numerical_gradient(f, x, verbose=True, h=0.00001):\n",
    "    \"\"\"\n",
    "    a naive implementation of numerical gradient of f at x\n",
    "    - f should be a function that takes a single argument\n",
    "    - x is the point (numpy array) to evaluate the gradient at\n",
    "    \"\"\"\n",
    "\n",
    "    fx = f(x) # evaluate function value at original point\n",
    "    grad = np.zeros_like(x)\n",
    "    # iterate over all indexes in x\n",
    "    it = np.nditer(x, flags=['multi_index'], op_flags=['readwrite'])\n",
    "    while not it.finished:\n",
    "\n",
    "        # evaluate function at x+h\n",
    "        ix = it.multi_index\n",
    "        oldval = x[ix]\n",
    "        x[ix] = oldval + h # increment by h\n",
    "        fxph = f(x) # evalute f(x + h)\n",
    "        x[ix] = oldval - h\n",
    "        fxmh = f(x) # evaluate f(x - h)\n",
    "        x[ix] = oldval # restore\n",
    "\n",
    "        # compute the partial derivative with centered formula\n",
    "        grad[ix] = (fxph - fxmh) / (2 * h) # the slope\n",
    "        if verbose:\n",
    "            print(ix, grad[ix])\n",
    "        it.iternext() # step to next dimension\n",
    "\n",
    "    return grad\n",
    "\n",
    "np.random.seed(231)\n",
    "N, D, H, C = 3, 5, 50, 7\n",
    "X = np.random.randn(N, D)\n",
    "y = np.random.randint(C, size = N)\n",
    "\n",
    "std = 1e-3\n",
    "model = TwoLayerNet(input_dim = D, hidden_dim = H, num_classes = C, weight_scale = std)\n",
    "\n",
    "print('Testing initialization ... ')\n",
    "W1_std = abs(model.params['W1'].std() - std)\n",
    "b1 = model.params['b1']\n",
    "W2_std = abs(model.params['W2'].std() - std)\n",
    "b2 = model.params['b2']\n",
    "assert W1_std < std / 10, 'First layer weights do not seem right'\n",
    "assert np.all(b1 == 0), 'First layer biases do not seem right'\n",
    "assert W2_std < std / 10, 'Second layer weights do not seem right'\n",
    "assert np.all(b2 == 0), 'Second layer biases do not seem right'\n",
    "\n",
    "print('Testing test-time forward pass ... ')\n",
    "model.params['W1'] = np.linspace(-0.7, 0.3, num = D * H).reshape(D, H)\n",
    "model.params['b1'] = np.linspace(-0.1, 0.9, num = H)\n",
    "model.params['W2'] = np.linspace(-0.3, 0.4, num = H * C).reshape(H, C)\n",
    "model.params['b2'] = np.linspace(-0.9, 0.1, num = C)\n",
    "X = np.linspace(-5.5, 4.5, num = N * D).reshape(D, N).T\n",
    "scores = model.loss(X)\n",
    "correct_scores = np.asarray(\n",
    "  [[11.53165108,  12.2917344,   13.05181771,  13.81190102,  14.57198434, 15.33206765,  16.09215096],\n",
    "   [12.05769098,  12.74614105,  13.43459113,  14.1230412,   14.81149128, 15.49994135,  16.18839143],\n",
    "   [12.58373087,  13.20054771,  13.81736455,  14.43418138,  15.05099822, 15.66781506,  16.2846319 ]])\n",
    "scores_diff = np.abs(scores - correct_scores).sum()\n",
    "assert scores_diff < 1e-6, 'Problem with test-time forward pass'\n",
    "\n",
    "print('Testing training loss (no regularization)')\n",
    "y = np.asarray([0, 5, 1])\n",
    "loss, grads = model.loss(X, y)\n",
    "correct_loss = 3.4702243556\n",
    "assert abs(loss - correct_loss) < 1e-10, 'Problem with training-time loss'\n",
    "\n",
    "model.reg = 1.0\n",
    "loss, grads = model.loss(X, y)\n",
    "correct_loss = 26.5948426952\n",
    "\n",
    "\n",
    "if abs(loss - correct_loss) >= 1e-10:\n",
    "    print('Problem with regularization loss')\n",
    "\n",
    "for reg in [0.0, 0.7]:\n",
    "    print('Running numeric gradient check with reg = ', reg)\n",
    "    model.reg = reg\n",
    "    loss, grads = model.loss(X, y)\n",
    "\n",
    "    for name in sorted(grads):\n",
    "        f = lambda _: model.loss(X, y)[0]\n",
    "        grad_num = eval_numerical_gradient(f, model.params[name], verbose = False)\n",
    "        print('%s relative error: %.2e' % (name, rel_error(grad_num, grads[name])))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Solver\n",
    "In the previous assignment, the logic for training models was coupled to the models themselves. Following a more modular design, for this assignment we have split the logic for training models into a separate class.\n",
    "\n",
    "Read through it to familiarize yourself with the API. After doing so, use a <code>Solver</code> instance to train a <code>TwoLayerNet</code> that achieves at least <code>50%</code> accuracy on the validation set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(Iteration 1 / 1200) loss: 2.302664\n",
      "(Epoch 0 / 20) train acc: 0.513000; val_acc: 0.500000\n",
      "(Epoch 1 / 20) train acc: 0.606000; val_acc: 0.613833\n",
      "(Iteration 101 / 1200) loss: 0.468444\n",
      "(Epoch 2 / 20) train acc: 0.758000; val_acc: 0.772833\n",
      "(Epoch 3 / 20) train acc: 0.804000; val_acc: 0.792000\n",
      "(Iteration 201 / 1200) loss: 0.380288\n",
      "(Epoch 4 / 20) train acc: 0.799000; val_acc: 0.789000\n",
      "(Epoch 5 / 20) train acc: 0.818000; val_acc: 0.804000\n",
      "(Iteration 301 / 1200) loss: 0.453961\n",
      "(Epoch 6 / 20) train acc: 0.841000; val_acc: 0.834667\n",
      "(Iteration 401 / 1200) loss: 0.350471\n",
      "(Epoch 7 / 20) train acc: 0.826000; val_acc: 0.829167\n",
      "(Epoch 8 / 20) train acc: 0.822000; val_acc: 0.843667\n",
      "(Iteration 501 / 1200) loss: 0.403349\n",
      "(Epoch 9 / 20) train acc: 0.858000; val_acc: 0.834167\n",
      "(Epoch 10 / 20) train acc: 0.878000; val_acc: 0.855167\n",
      "(Iteration 601 / 1200) loss: 0.296753\n",
      "(Epoch 11 / 20) train acc: 0.859000; val_acc: 0.841667\n",
      "(Iteration 701 / 1200) loss: 0.275567\n",
      "(Epoch 12 / 20) train acc: 0.866000; val_acc: 0.853667\n",
      "(Epoch 13 / 20) train acc: 0.865000; val_acc: 0.853833\n",
      "(Iteration 801 / 1200) loss: 0.335303\n",
      "(Epoch 14 / 20) train acc: 0.871000; val_acc: 0.868500\n",
      "(Epoch 15 / 20) train acc: 0.899000; val_acc: 0.870000\n",
      "(Iteration 901 / 1200) loss: 0.306620\n",
      "(Epoch 16 / 20) train acc: 0.880000; val_acc: 0.861333\n",
      "(Iteration 1001 / 1200) loss: 0.248325\n",
      "(Epoch 17 / 20) train acc: 0.874000; val_acc: 0.862667\n",
      "(Epoch 18 / 20) train acc: 0.876000; val_acc: 0.864833\n",
      "(Iteration 1101 / 1200) loss: 0.292528\n",
      "(Epoch 19 / 20) train acc: 0.874000; val_acc: 0.870500\n",
      "(Epoch 20 / 20) train acc: 0.879000; val_acc: 0.871667\n"
     ]
    },
    {
     "data": {
      "image/png": "